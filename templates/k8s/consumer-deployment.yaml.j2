apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ consumer_deployment_name }}
  namespace: {{ k8s_namespace }}
  labels:
    app: consumer
spec:
  replicas: {{ consumer_replicas }}
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: consumer
          image: {{ registry }}/consumer:{{ image_tag }}
          imagePullPolicy: Always
          env:
            - name: KAFKA_BOOTSTRAP
              value: "{{ kafka_bootstrap }}"

            # Use explicit in-cluster DNS + path the consumer posts to
            # (If your {{ flask_service_internal_url }} already includes /update_data, you can swap this back in.)
            - name: FLASK_URL
              value: "http://{{ flask_service_name }}.{{ k8s_namespace }}.svc.cluster.local:{{ flask_container_port }}/update_data"

            - name: POST_TIMEOUT
              value: "{{ consumer_post_timeout }}"
            - name: POST_BACKOFF_SEC
              value: "{{ consumer_post_backoff }}"
            - name: KAFKA_GROUP_ID
              value: "{{ consumer_group_id }}"

            # Pattern-based subscription to shared + per-sensor topics
            - name: KAFKA_TOPIC_PATTERN
              value: "^(?:sensors$|weather$|airquality$|power$|weather\\.|air\\.|water\\.|light\\.|sys\\.)"

            - name: KAFKA_AUTO_OFFSET_RESET
              value: "latest"

            # Static membership id (note: with a Deployment pod names change on rollout)
            - name: KAFKA_INSTANCE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name

            # ? Now that /bulk_update exists, turn batching back on
            - name: POST_BATCH_SIZE
              value: "20"

            - name: FLASK_URL_BULK
              value: "http://{{ flask_service_name }}.{{ k8s_namespace }}.svc.cluster.local:{{ flask_container_port }}/bulk_update"

            # Optional: documents intent (consumer.py already keys off presence of pattern)
            - name: CONSUME_MODE
              value: "pattern"
